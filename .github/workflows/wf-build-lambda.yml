name: 'Build: lambda'

on:
  workflow_call:
    inputs:
      project:
        type: string
        required: true
      release:
        type: boolean
        default: false
      upload-artifact:
        type: boolean
        default: false

jobs:
  build:
    name: ${{ inputs.project }}
    runs-on: ubuntu-latest
    env:
      SCCACHE_GHA_ENABLED: 'true'
      RUSTC_WRAPPER: 'sccache'
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1

      # We hash all depencies and project files, and if nothing has changed then we try
      # to restore from cache and skip the entire build.
      - name: Restore artifact from cache
        id: cached-artifact
        uses: actions/cache/restore@v3
        with:
          path: target/lambda/${{ inputs.project }}
          key: ${{ hashFiles('${{ inputs.project }}/**') }}-${{ hashFiles('lib-handler/**') }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('.github/workflows/wf-build.yml') }}-${{ hashFiles('.github/workflows/wf-build-lambda.yml') }}
          # Restore keys matche on the prefix, which will hit our uniquely generated key.
          restore-keys: ${{ hashFiles('${{ inputs.project }}/**') }}-${{ hashFiles('lib-handler/**') }}-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('.github/workflows/wf-build.yml') }}-${{ hashFiles('.github/workflows/wf-build-lambda.yml') }}

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        if: steps.cached-artifact.outputs.cache-hit != 'true'
        with:
          toolchain: stable
          cache: true
      - name: Install Zig toolchain
        if: steps.cached-artifact.outputs.cache-hit != 'true'
        uses: korandoru/setup-zig@v1
        with:
          zig-version: 0.11.0
      - name: Install Cargo Lambda
        if: steps.cached-artifact.outputs.cache-hit != 'true'
        uses: jaxxstorm/action-install-gh-release@v1.9.0
        with:
          repo: cargo-lambda/cargo-lambda
          platform: linux
          arch: x86_64

      - uses: mozilla-actions/sccache-action@v0.0.3
        if: steps.cached-artifact.outputs.cache-hit != 'true'
        name: 'Setup sccache'

      - name: Build release build
        if: ${{ inputs.release && steps.cached-artifact.outputs.cache-hit != 'true' }}
        run: just build ${{ inputs.project }}

      - name: Build debug build
        if: ${{ !inputs.release }}
        run: just build ${{ inputs.project }} debug

      - name: Save artifact to cache
        if: ${{ inputs.upload-artifact }}
        uses: actions/cache/save@v3
        with:
          path: target/lambda/${{ inputs.project }}
          # Caches are immutable, so we need to use a new key every time.
          key: ${{ steps.cached-artifact.outputs.cache-primary-key }}-${{ github.run_id }}

      - uses: actions/upload-artifact@v3
        if: ${{ inputs.upload-artifact }}
        with:
          name: ${{ inputs.project }}
          path: target/lambda/${{ inputs.project }}
          if-no-files-found: error
          retention-days: 1
