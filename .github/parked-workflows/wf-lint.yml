name: Lint code

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      toolchain:
        required: false
        type: string
        default: stable
      with-openssl:
        required: false
        type: boolean
      with-protobuf:
        required: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Update dependencies
        if: ${{ inputs.with-openssl || inputs.with-protobuf }}
        run: sudo apt-get update

      - name: Install openssl (if needed)
        if: ${{ inputs.with-openssl }}
        run: sudo apt-get install -y libssl-dev openssl ca-certificates

      - name: Install protobuf (if needed)
        if: ${{ inputs.with-protobuf }}
        run: sudo apt-get install -y protobuf-compiler

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}

      - name: Setup nightly toolchain
        if: ${{ inputs.toolchain == 'nightly' }}
        run: |
          rustup default nightly

      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ inputs.working-directory }}/target
          key: cargo-${{ hashFiles('**/Cargo.lock') }}-${{ inputs.working-directory }}
          restore-keys: cargo-

      - run: cargo test
        working-directory: ${{ inputs.working-directory }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Update dependencies
        if: ${{ inputs.with-openssl || inputs.with-protobuf }}
        run: sudo apt-get update

      - name: Install openssl (if needed)
        if: ${{ inputs.with-openssl }}
        run: sudo apt-get install -y libssl-dev openssl ca-certificates

      - name: Install protobuf (if needed)
        if: ${{ inputs.with-protobuf }}
        run: sudo apt-get install -y protobuf-compiler

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          components: clippy

      - name: Setup nightly toolchain
        if: ${{ inputs.toolchain == 'nightly' }}
        run: |
          rustup default nightly

      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ inputs.working-directory }}/target
          key: cargo-${{ hashFiles('**/Cargo.lock') }}-${{ inputs.working-directory }}
          restore-keys: cargo-

      - run: cargo clippy --all-targets -- -D clippy::all
        working-directory: ${{ inputs.working-directory }}

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          components: rustfmt

      - run: cargo fmt --all -- --check
        working-directory: ${{ inputs.working-directory }}
